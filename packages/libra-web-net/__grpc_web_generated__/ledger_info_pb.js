/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.types.LedgerInfo', null, global);
goog.exportSymbol('proto.types.LedgerInfoWithSignatures', null, global);
goog.exportSymbol('proto.types.ValidatorSignature', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.LedgerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.LedgerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.LedgerInfo.displayName = 'proto.types.LedgerInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.LedgerInfoWithSignatures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.LedgerInfoWithSignatures.repeatedFields_, null);
};
goog.inherits(proto.types.LedgerInfoWithSignatures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.LedgerInfoWithSignatures.displayName = 'proto.types.LedgerInfoWithSignatures';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.ValidatorSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.ValidatorSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.ValidatorSignature.displayName = 'proto.types.ValidatorSignature';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.LedgerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.types.LedgerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.LedgerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.LedgerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    transactionAccumulatorHash: msg.getTransactionAccumulatorHash_asB64(),
    consensusDataHash: msg.getConsensusDataHash_asB64(),
    consensusBlockId: msg.getConsensusBlockId_asB64(),
    epochNum: jspb.Message.getFieldWithDefault(msg, 5, 0),
    timestampUsecs: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.LedgerInfo}
 */
proto.types.LedgerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.LedgerInfo;
  return proto.types.LedgerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.LedgerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.LedgerInfo}
 */
proto.types.LedgerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionAccumulatorHash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConsensusDataHash(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConsensusBlockId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochNum(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestampUsecs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.LedgerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.LedgerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.LedgerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.LedgerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTransactionAccumulatorHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getConsensusDataHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getConsensusBlockId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getEpochNum();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTimestampUsecs();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional uint64 version = 1;
 * @return {number}
 */
proto.types.LedgerInfo.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.types.LedgerInfo.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes transaction_accumulator_hash = 2;
 * @return {string}
 */
proto.types.LedgerInfo.prototype.getTransactionAccumulatorHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes transaction_accumulator_hash = 2;
 * This is a type-conversion wrapper around `getTransactionAccumulatorHash()`
 * @return {string}
 */
proto.types.LedgerInfo.prototype.getTransactionAccumulatorHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionAccumulatorHash()));
};


/**
 * optional bytes transaction_accumulator_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionAccumulatorHash()`
 * @return {!Uint8Array}
 */
proto.types.LedgerInfo.prototype.getTransactionAccumulatorHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionAccumulatorHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.LedgerInfo.prototype.setTransactionAccumulatorHash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes consensus_data_hash = 3;
 * @return {string}
 */
proto.types.LedgerInfo.prototype.getConsensusDataHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes consensus_data_hash = 3;
 * This is a type-conversion wrapper around `getConsensusDataHash()`
 * @return {string}
 */
proto.types.LedgerInfo.prototype.getConsensusDataHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConsensusDataHash()));
};


/**
 * optional bytes consensus_data_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConsensusDataHash()`
 * @return {!Uint8Array}
 */
proto.types.LedgerInfo.prototype.getConsensusDataHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConsensusDataHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.LedgerInfo.prototype.setConsensusDataHash = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes consensus_block_id = 4;
 * @return {string}
 */
proto.types.LedgerInfo.prototype.getConsensusBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes consensus_block_id = 4;
 * This is a type-conversion wrapper around `getConsensusBlockId()`
 * @return {string}
 */
proto.types.LedgerInfo.prototype.getConsensusBlockId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConsensusBlockId()));
};


/**
 * optional bytes consensus_block_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConsensusBlockId()`
 * @return {!Uint8Array}
 */
proto.types.LedgerInfo.prototype.getConsensusBlockId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConsensusBlockId()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.LedgerInfo.prototype.setConsensusBlockId = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint64 epoch_num = 5;
 * @return {number}
 */
proto.types.LedgerInfo.prototype.getEpochNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.types.LedgerInfo.prototype.setEpochNum = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 timestamp_usecs = 6;
 * @return {number}
 */
proto.types.LedgerInfo.prototype.getTimestampUsecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.types.LedgerInfo.prototype.setTimestampUsecs = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.LedgerInfoWithSignatures.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.LedgerInfoWithSignatures.prototype.toObject = function(opt_includeInstance) {
  return proto.types.LedgerInfoWithSignatures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.LedgerInfoWithSignatures} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.LedgerInfoWithSignatures.toObject = function(includeInstance, msg) {
  var f, obj = {
    signaturesList: jspb.Message.toObjectList(msg.getSignaturesList(),
    proto.types.ValidatorSignature.toObject, includeInstance),
    ledgerInfo: (f = msg.getLedgerInfo()) && proto.types.LedgerInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.LedgerInfoWithSignatures}
 */
proto.types.LedgerInfoWithSignatures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.LedgerInfoWithSignatures;
  return proto.types.LedgerInfoWithSignatures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.LedgerInfoWithSignatures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.LedgerInfoWithSignatures}
 */
proto.types.LedgerInfoWithSignatures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.ValidatorSignature;
      reader.readMessage(value,proto.types.ValidatorSignature.deserializeBinaryFromReader);
      msg.addSignatures(value);
      break;
    case 2:
      var value = new proto.types.LedgerInfo;
      reader.readMessage(value,proto.types.LedgerInfo.deserializeBinaryFromReader);
      msg.setLedgerInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.LedgerInfoWithSignatures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.LedgerInfoWithSignatures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.LedgerInfoWithSignatures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.LedgerInfoWithSignatures.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.ValidatorSignature.serializeBinaryToWriter
    );
  }
  f = message.getLedgerInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.LedgerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ValidatorSignature signatures = 1;
 * @return {!Array<!proto.types.ValidatorSignature>}
 */
proto.types.LedgerInfoWithSignatures.prototype.getSignaturesList = function() {
  return /** @type{!Array<!proto.types.ValidatorSignature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.ValidatorSignature, 1));
};


/** @param {!Array<!proto.types.ValidatorSignature>} value */
proto.types.LedgerInfoWithSignatures.prototype.setSignaturesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.ValidatorSignature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.ValidatorSignature}
 */
proto.types.LedgerInfoWithSignatures.prototype.addSignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.ValidatorSignature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.types.LedgerInfoWithSignatures.prototype.clearSignaturesList = function() {
  this.setSignaturesList([]);
};


/**
 * optional LedgerInfo ledger_info = 2;
 * @return {?proto.types.LedgerInfo}
 */
proto.types.LedgerInfoWithSignatures.prototype.getLedgerInfo = function() {
  return /** @type{?proto.types.LedgerInfo} */ (
    jspb.Message.getWrapperField(this, proto.types.LedgerInfo, 2));
};


/** @param {?proto.types.LedgerInfo|undefined} value */
proto.types.LedgerInfoWithSignatures.prototype.setLedgerInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.types.LedgerInfoWithSignatures.prototype.clearLedgerInfo = function() {
  this.setLedgerInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.LedgerInfoWithSignatures.prototype.hasLedgerInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.ValidatorSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.types.ValidatorSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.ValidatorSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.ValidatorSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    validatorId: msg.getValidatorId_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.ValidatorSignature}
 */
proto.types.ValidatorSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.ValidatorSignature;
  return proto.types.ValidatorSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.ValidatorSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.ValidatorSignature}
 */
proto.types.ValidatorSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.ValidatorSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.ValidatorSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.ValidatorSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.ValidatorSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidatorId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes validator_id = 1;
 * @return {string}
 */
proto.types.ValidatorSignature.prototype.getValidatorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes validator_id = 1;
 * This is a type-conversion wrapper around `getValidatorId()`
 * @return {string}
 */
proto.types.ValidatorSignature.prototype.getValidatorId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorId()));
};


/**
 * optional bytes validator_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorId()`
 * @return {!Uint8Array}
 */
proto.types.ValidatorSignature.prototype.getValidatorId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorId()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.ValidatorSignature.prototype.setValidatorId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {string}
 */
proto.types.ValidatorSignature.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.types.ValidatorSignature.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.types.ValidatorSignature.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.ValidatorSignature.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


goog.object.extend(exports, proto.types);
